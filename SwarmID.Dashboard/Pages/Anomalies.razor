@page "/anomalies"
@using SwarmID.Core.Models
@using SwarmID.Core.Interfaces
@using SwarmID.Dashboard.Services
@inject IAnomalyRepository AnomalyRepository
@inject IAlgorithmSelectionService AlgorithmService
@inject IJSRuntime JSRuntime

<PageTitle>Anomaly Detection Dashboard</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>Anomaly Detection Dashboard</h1>
    <div class="d-flex align-items-center">
        <span class="badge bg-info me-2">Algorithm: @AlgorithmService.CurrentAlgorithm</span>
        <a href="/counter" class="btn btn-outline-primary btn-sm">
            <i class="oi oi-cog"></i> Change Algorithm
        </a>
    </div>
</div>

<div class="row mb-3">
    <div class="col-md-4">
        <div class="card text-white bg-danger">
            <div class="card-header">Critical Anomalies</div>
            <div class="card-body">
                <h4 class="card-title">@criticalCount</h4>
                <p class="card-text">High confidence threats detected</p>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card text-white bg-warning">
            <div class="card-header">Total Anomalies</div>
            <div class="card-body">
                <h4 class="card-title">@totalCount</h4>
                <p class="card-text">All anomalies in the last 24 hours</p>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card text-white bg-success">
            <div class="card-header">False Positives</div>
            <div class="card-body">
                <h4 class="card-title">@falsePositiveCount</h4>
                <p class="card-text">Confirmed false alarms</p>
            </div>
        </div>
    </div>
</div>

<!-- Date Range and Page Size Controls -->
<div class="row mb-3">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">Filter Options</h5>
            </div>            <div class="card-body">
                <div class="row">
                    <div class="col-md-2">
                        <label for="pageSize" class="form-label">Items per page:</label>
                        <select id="pageSize" class="form-select" @bind="pageSize" @bind:after="OnPageSizeChanged">
                            <option value="10">10</option>
                            <option value="20">20</option>
                            <option value="50">50</option>
                            <option value="100">100</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label for="anomalyType" class="form-label">Anomaly Type:</label>
                        <select id="anomalyType" class="form-select" @bind="selectedAnomalyType" @bind:after="OnTypeFilterChanged">
                            <option value="">All Types</option>
                            @foreach (var type in Enum.GetValues<AnomalyType>())
                            {
                                <option value="@type">@type.ToString()</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label for="fromDate" class="form-label">From Date:</label>
                        <input id="fromDate" type="datetime-local" class="form-control" @bind="fromDate" @bind:after="OnDateFilterChanged" />
                    </div>
                    <div class="col-md-3">
                        <label for="toDate" class="form-label">To Date:</label>
                        <input id="toDate" type="datetime-local" class="form-control" @bind="toDate" @bind:after="OnDateFilterChanged" />
                    </div>
                    <div class="col-md-2 d-flex align-items-end">
                        <button class="btn btn-primary me-2" @onclick="RefreshData">
                            <i class="fas fa-sync-alt"></i> Refresh
                        </button>
                        <button class="btn btn-secondary" @onclick="ClearFilters">
                            <i class="fas fa-times"></i> Clear
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row mb-3">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Anomalies (@filteredTotalCount total)</h5>
                <button class="btn btn-primary btn-sm" @onclick="RefreshData">
                    <i class="fas fa-sync-alt"></i> Refresh
                </button>
            </div>
            <div class="card-body">
                @if (isLoading)
                {
                    <div class="d-flex justify-content-center">
                        <div class="spinner-border" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>
                    </div>
                }
                else if (!anomalies.Any())
                {
                    <div class="alert alert-info">
                        No anomalies detected in the selected time period.
                    </div>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead class="table-dark">
                                <tr>
                                    <th>Timestamp</th>
                                    <th>Source</th>
                                    <th>Destination</th>
                                    <th>Type</th>
                                    <th>Confidence</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var anomaly in anomalies)
                                {
                                    <tr class="@GetRowClass(anomaly)">
                                        <td>@anomaly.DetectedAt.ToString("yyyy-MM-dd HH:mm:ss")</td>
                                        <td>
                                            @if (anomaly.SourceIPs.Any())
                                            {
                                                @($"{anomaly.SourceIPs.First()}:{(anomaly.Ports.Any() ? anomaly.Ports.First() : 0)}")
                                            }
                                            else
                                            {
                                                <text>N/A</text>
                                            }
                                        </td>
                                        <td>
                                            @if (anomaly.DestinationIPs.Any())
                                            {
                                                @($"{anomaly.DestinationIPs.First()}:{(anomaly.Ports.Skip(1).Any() ? anomaly.Ports.Skip(1).First() : 0)}")
                                            }
                                            else
                                            {
                                                <text>N/A</text>
                                            }
                                        </td>
                                        <td>
                                            <span class="badge bg-@GetTypeBadgeClass(anomaly.Type)">
                                                @anomaly.Type.ToString()
                                            </span>
                                        </td>
                                        <td>
                                            <div class="progress" style="height: 20px;">
                                                <div class="progress-bar @GetConfidenceBarClass(anomaly.Score)" 
                                                     role="progressbar" 
                                                     style="width: @(anomaly.Score)%"
                                                     aria-valuenow="@(anomaly.Score)" 
                                                     aria-valuemin="0" 
                                                     aria-valuemax="100">
                                                    @(anomaly.Score.ToString("F1"))%
                                                </div>
                                            </div>
                                        </td>
                                        <td>
                                            <span class="badge bg-@GetStatusBadgeClass(anomaly.Status)">
                                                @anomaly.Status
                                            </span>
                                        </td>
                                        <td>
                                            <div class="btn-group btn-group-sm" role="group">
                                                <button class="btn btn-outline-success" @onclick="() => MarkAsConfirmed(anomaly)" 
                                                        disabled="@(anomaly.Status == AnomalyStatus.Confirmed)">
                                                    ✓
                                                </button>
                                                <button class="btn btn-outline-danger" @onclick="() => MarkAsFalsePositive(anomaly)"
                                                        disabled="@(anomaly.Status == AnomalyStatus.FalsePositive)">
                                                    ✗
                                                </button>
                                                <button class="btn btn-outline-info" @onclick="() => ViewDetails(anomaly)">
                                                    👁
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <!-- Pagination Controls -->
                    @if (totalPages > 1)
                    {
                        <nav aria-label="Anomaly pagination">
                            <ul class="pagination justify-content-center mt-3">
                                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => GoToPage(1)" disabled="@(currentPage == 1)">
                                        &laquo;&laquo; First
                                    </button>
                                </li>
                                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => GoToPage(currentPage - 1)" disabled="@(currentPage == 1)">
                                        &laquo; Previous
                                    </button>
                                </li>

                                @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                                {
                                    var pageNumber = i;
                                    <li class="page-item @(i == currentPage ? "active" : "")">
                                        <button class="page-link" @onclick="() => GoToPage(pageNumber)">
                                            @i
                                        </button>
                                    </li>
                                }

                                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => GoToPage(currentPage + 1)" disabled="@(currentPage == totalPages)">
                                        Next &raquo;
                                    </button>
                                </li>
                                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => GoToPage(totalPages)" disabled="@(currentPage == totalPages)">
                                        Last &raquo;&raquo;
                                    </button>
                                </li>
                            </ul>
                        </nav>

                        <div class="text-center text-muted">
                            <small>
                                Showing @((currentPage - 1) * pageSize + 1) to @(Math.Min(currentPage * pageSize, filteredTotalCount)) 
                                of @filteredTotalCount anomalies
                            </small>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

@if (selectedAnomaly != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Anomaly Details</h5>
                    <button type="button" class="btn-close" @onclick="CloseDetails"></button>
                </div>
                <div class="modal-body">
                    <h6>Traffic Information</h6>
                    <div class="row">
                        <div class="col-md-6">
                            <strong>Source IPs:</strong> @string.Join(", ", selectedAnomaly.SourceIPs)<br>
                            <strong>Destination IPs:</strong> @string.Join(", ", selectedAnomaly.DestinationIPs)<br>
                            <strong>Algorithm:</strong> @selectedAnomaly.Algorithm<br>
                        </div>
                        <div class="col-md-6">
                            <strong>Ports:</strong> @string.Join(", ", selectedAnomaly.Ports)<br>
                            <strong>Configuration:</strong> @selectedAnomaly.ConfigurationUsed<br>
                            <strong>Score:</strong> @selectedAnomaly.Score.ToString("F1")<br>
                        </div>
                    </div>
                    
                    <hr>
                    
                    <h6>Additional Information</h6>
                    <div class="row">
                        <div class="col-md-12">
                            <strong>Description:</strong> @selectedAnomaly.Description<br>
                            <strong>Status:</strong> @selectedAnomaly.Status<br>
                            @if (!string.IsNullOrEmpty(selectedAnomaly.AnalystFeedback))
                            {
                                <strong>Analyst Feedback:</strong> @selectedAnomaly.AnalystFeedback<br>
                            }
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDetails">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Anomaly> anomalies = new();
    private Anomaly? selectedAnomaly;
    private int totalCount = 0;
    private int criticalCount = 0;
    private int falsePositiveCount = 0;
    private int filteredTotalCount = 0;
    
    // Pagination variables
    private int currentPage = 1;
    private int pageSize = 20;
    private int totalPages = 0;
    private bool isLoading = true;
      // Filter variables
    private DateTime? fromDate;
    private DateTime? toDate;
    private string selectedAnomalyType = "";

    protected override async Task OnInitializedAsync()
    {
        // Set default date range to last 24 hours
        fromDate = DateTime.Now.AddDays(-1);
        toDate = DateTime.Now;
        
        await RefreshData();
    }

    private async Task RefreshData()
    {
        try
        {
            isLoading = true;
            StateHasChanged();            // Get paginated anomalies
            var typeFilter = string.IsNullOrEmpty(selectedAnomalyType) ? (AnomalyType?)null : Enum.Parse<AnomalyType>(selectedAnomalyType);
            var (pagedAnomalies, totalAnomaliesCount) = await AnomalyRepository.GetAnomaliesPagedAsync(
                fromDate, toDate, typeFilter, currentPage, pageSize);
            
            anomalies = pagedAnomalies.ToList();
            filteredTotalCount = totalAnomaliesCount;
            totalPages = (int)Math.Ceiling((double)filteredTotalCount / pageSize);
            
            // Get stats for the cards (all anomalies in last 24 hours)
            var statsFrom = DateTime.UtcNow.AddDays(-1);
            var allRecentAnomalies = await AnomalyRepository.GetAnomaliesAsync(statsFrom);
            var recentAnomaliesList = allRecentAnomalies.ToList();
            
            totalCount = recentAnomaliesList.Count;
            criticalCount = recentAnomaliesList.Count(a => a.Score > 80.0);
            falsePositiveCount = recentAnomaliesList.Count(a => a.Status == AnomalyStatus.FalsePositive);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task GoToPage(int page)
    {
        if (page >= 1 && page <= totalPages && page != currentPage)
        {
            currentPage = page;
            await RefreshData();
        }
    }

    private async Task OnPageSizeChanged()
    {
        currentPage = 1; // Reset to first page when page size changes
        await RefreshData();
    }    private async Task OnDateFilterChanged()
    {
        currentPage = 1; // Reset to first page when filters change
        await RefreshData();
    }

    private async Task OnTypeFilterChanged()
    {
        currentPage = 1; // Reset to first page when filters change
        await RefreshData();
    }

    private async Task ClearFilters()
    {
        fromDate = DateTime.Now.AddDays(-1);
        toDate = DateTime.Now;
        selectedAnomalyType = "";
        currentPage = 1;
        await RefreshData();
    }

    private async Task MarkAsConfirmed(Anomaly anomaly)
    {
        anomaly.Status = AnomalyStatus.Confirmed;
        await AnomalyRepository.UpdateAnomalyAsync(anomaly);
        await RefreshData();
    }

    private async Task MarkAsFalsePositive(Anomaly anomaly)
    {
        anomaly.Status = AnomalyStatus.FalsePositive;
        await AnomalyRepository.UpdateAnomalyAsync(anomaly);
        await RefreshData();
    }

    private void ViewDetails(Anomaly anomaly)
    {
        selectedAnomaly = anomaly;
    }

    private void CloseDetails()
    {
        selectedAnomaly = null;
    }

    private string GetRowClass(Anomaly anomaly)
    {
        return anomaly.Score > 80.0 ? "table-danger" : 
               anomaly.Score > 60.0 ? "table-warning" : "";
    }

    private string GetTypeBadgeClass(AnomalyType type)
    {
        return type switch
        {
            AnomalyType.PortScan => "danger",
            AnomalyType.DataExfiltration => "danger",
            AnomalyType.DDoS => "danger",
            AnomalyType.CommandAndControl => "warning",
            _ => "secondary"
        };
    }

    private string GetConfidenceBarClass(double score)
    {
        return score > 80.0 ? "bg-danger" :
               score > 60.0 ? "bg-warning" : "bg-info";
    }

    private string GetStatusBadgeClass(AnomalyStatus status)
    {
        return status switch
        {
            AnomalyStatus.New => "primary",
            AnomalyStatus.Investigating => "warning",
            AnomalyStatus.Confirmed => "danger",
            AnomalyStatus.FalsePositive => "success",
            AnomalyStatus.Resolved => "secondary",
            _ => "secondary"
        };
    }
}

<style>
    .table-responsive {
        max-height: 600px;
    }
    
    .progress {
        min-width: 80px;
    }
    
    .btn-group-sm .btn {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
        line-height: 1.5;
        border-radius: 0.2rem;
    }
    
    .pagination .page-link {
        cursor: pointer;
    }
    
    .pagination .page-item.disabled .page-link {
        cursor: not-allowed;
    }
</style>
